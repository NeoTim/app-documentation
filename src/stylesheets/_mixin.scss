@import url(https://fonts.googleapis.com/css?family=Source+Code+Pro:400,600,300,500,700,900,200|Source+Sans+Pro:400,300,600,700,900,200italic,300italic);

%source-code {
  font-family: 'Source Code Pro';
}

%source-sans {
  font-family: 'Source Sans Pro', sans-serif;
}

/**
 * @Mixin(): compensate-header
 * @description Use with (:before|:after) pseudo selectors.
 *              Typically it is a bad practice to pixel position elements to get around fixed navbar sizes.
 *              This will help normalize your content to fill the correct space
 *              You can place this on elements instead of trying to position your content around fixed navbars with padding and margin
 * @return {Unit} [$size:xs]  The current Navbar height
 *
 * @usage
 *
 *
 * ```html
 *
 * <nav></nav>
 * <main>
 *   <section></section>
 *   <section></section>
 * </main>
 *
 * ```
 *
 * ```scss
 * $navbar-height: 5rem;
 *
 * nav {
 *   height: $navbar-height;
 *   position: fixed;
 *   top:0;
 * }
 *
 *  // AVOID
 * main {
 *   position:fixed;
 *   top: 5rem;
 *   // Because now you can properly set the height of the main container, without doing some weird hack
 * }
 *
 * // AVOID
 * main {
 *  position:relative;
 *  margin-top: 5rem;
 *  // Same issue
 * }
 *
 * // RECOMMEND
 *
 * main {
 *   position: relative;
 *   &:before {
 *     @include compensate-header($size);
 *   }
 * }
 * ```
 *
 * This will place a :before placeholder before all the content in the main
 *
 * ```html
 *
 * <nav></nav> <!-- height 5rem -->
 * <main>
 *   :before // <!-- height 5rem -->
 *   <section></section>
 *   <section></section>
 * </main>
 *
 * ```
 */
@mixin compensate-header($media:md) {
    $size: if($media == md, $header-height-md, $header-height-xs);
    content: " ";
    display: flex;
    position: relative;
    left:0;
    min-width: 100%;
    min-height: $size;
    max-height: $size;
}

@mixin translate3d($values...) {
  -webkit-transform: translate3d($values);
     -moz-transform: translate3d($values);
      -ms-transform: translate3d($values);
       -o-transform: translate3d($values);
          transform: translate3d($values);
}

@mixin transform($value) {
  -webkit-transform: $value;
     -moz-transform: $value;
      -ms-transform: $value;
       -o-transform: $value;
          transform: $value;
}


/**
 * @Mixin(): size
 * @Helper-Mixin(): min-size
 * @Helper-Mixin(): max-size
 *
 *
 * @description Shorthand property for applying size properties to elements
 * @param  {Unit}    [$size:false]    Unit as ths width and height values. unless height is provided
 * @param  {Unit}    [$height:false]  Unit as the height value
 * @param  {Boolean} [$min:false]     Boolean Whether to use min-(width|height)
 * @param  {Boolean} [$max:false]     Boolean Whether to use max-(width|height)
 * @usage
 *
 * ```scss
 *
 * .selector {
 *   @include size(100vw, 100vh);
 * }
 *
 * .selector-two {
 *   @include min-size(100vw, 100vh);
 * }
 *
 * .selector-three {
 *   @include max-size(100%);
 * }
 *
 * /// renders the following
 *
 *
 * .selector {
 *   height: 100vw;
 *   width: 100vh;
 * }
 *
 * .selector-two {
 *   min-height: 100vw;
 *   min-width: 100vh;
 * }
 *
 * .selector-three {
 *   max-height: 100%;
 *   max-width: 100%;
 * }
 *
 * ```
 */
@mixin size($size:false, $height:false, $min:false, $max:false) {

  $w: if($min, 'min-width', if($max, 'max-width', 'width'));
  $h: if($min, 'min-height', if($max, 'max-height', 'height'));
  $height: if($height, $height, $size);

  @if $size {#{$w}: $size};
  @if $height {#{$h}: $height};
}

@mixin min-size($size:false, $height:false){

  @include size($size, $height, $min:true);
}

@mixin max-size($size:false, $height:fals){

  @include size($size, $height, $max:true);
}


/**
 * @Mixin(): breakpoint
 * @Helper-Mixins(): media-(xs|sm|md|lg|xl)
 *
 * @description Wrap your styles in a media query ranging from (xs to lg)
 * @param  {String} [$breakpoint]  (xs|sm|md|lg|xl)
 * @value xs = 0
 * @value sm = 34em
 * @value md = 48em
 * @value lg = 62em
 * @value xl = 75em
 *
 * @usage
 *
 * ``` scss
 *
 *  @include breakpoint(xs) {
 *      .selector {
 *        padding: 16px
 *      }
 *  }
 *
 *  @include breakpoint(md) {
 *      .selector {
 *        padding: 24px
 *      }
 *  }
 *
 * ```
 */

@mixin breakpoint($breakpoint) {
  @media (min-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin max-breakpoint($breakpoint) {
  @media (max-width: map-get($max-breakpoints, $breakpoint)) {
    @content;
  }
}
@mixin media-xs { @include breakpoint(xs) {@content;} }
@mixin media-sm { @include breakpoint(sm) {@content;} }
@mixin media-md { @include breakpoint(md) {@content;} }
@mixin media-lg { @include breakpoint(lg) {@content;} }
@mixin media-xl { @include breakpoint(xl) {@content;} }

@mixin max-media-xs { @include max-breakpoint(xs) {@content;} }
@mixin max-media-sm { @include max-breakpoint(sm) {@content;} }
@mixin max-media-md { @include max-breakpoint(md) {@content;} }
@mixin max-media-lg { @include max-breakpoint(lg) {@content;} }


/**-------------------------------------------------------------*/
%border-v {left: 0; width: 100%;}
%border-h {top: 0; height: 100%;}
%border-line-top {@extend %border-v; top: 0;}
%border-line-bottom {@extend %border-v; bottom: 0;}
%border-line-left {@extend %border-h; left: 0;}
%border-line-right {@extend %border-h; right: 0;}

/**
 * @Mixin(): border-line
 * @Helper-Mixin(): border-top
 * @Helper-Mixin(): border-left
 * @Helper-Mixin(): border-right
 * @Helper-Mixin(): border-bottom
 *
 * @description: apply a border using the psuedo (:before|:after) elements
 * @param  {String} [$side:bottom]
 * @param  {Unit}   [$color:#eeeeee]
 */
@mixin border-line($color:#eeeeee, $size:1px, $side:bottom) {
  $sizing: if($side == bottom or $side == top, height, width);
  content: " ";
  @if $color {background-color: $color}
  @if $color {background: $color}
  position: absolute;
  #{$sizing}: $size;
  max-#{$sizing}: $size;
  @extend %border-line-#{$side};
}
@mixin border-top($color:#eeeeee, $size:1px) {@include border-line($color, $size, $side:top);}
@mixin border-bottom($color:#eeeeee, $size:1px) {@include border-line($color, $size, $side:bottom);}
@mixin border-left($color:#eeeeee, $size:1px) {@include border-line($color, $size, $side:left);}
@mixin border-right($color:#eeeeee, $size:1px) {@include border-line($color, $size, $side:right);}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                      ///
///                                          Flexbox Containers                                          ///
/// **************************************************************************************************** ///
///                                                                                                      ///
///                                                                                                      ///
/// @resouce http://w3.org/tr/css3-flexbox/#flex-containers                                              ///
/// @NOTE:  - The 'flex' value causes an element to generate a block-level flex container box.           ///
///         - The 'inline-flex' value causes an element to generate a inline-level flex container box.   ///
///         - display: flex | inline-flex                                                                ///
///                                                                                                      ///
/// @USE    - (Placeholder selectors for each type, for those who rather @extend)                        ///
///                                                                                                      ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////


/* ----------------------------------------------------------------------
 * @Mixin(): flexbox
 * @Placeholder: %flexbox
 *
 * @description applies proper vender prefixes for older browsers when using `display:flex`;
 */
@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

%flexbox { @include flexbox; }


/* ----------------------------------------------------------------------
 * @Mixin(): inline-flex
 * @Placeholder: %inline-flex
 *
 * @description applies proper vender prefixes for older browsers when using `display:inline-flex`;
 */
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%inline-flex { @include inline-flex; }


/* ----------------------------------------------------------------------
 * @Mixin(): flex-direction
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-direction-property
 * @Helper-Mixin(): flex-dir
 * @Helper-Mixin(): flex-column
 * @Helper-Mixin(): flex-row
 * @Placeholder: %flex-column
 * @Placeholder: %flex-row
 *
 * @description The 'flex-direction' property specifies how flex items are placed in
 *              the flex container, by setting the direction of the flex container's
 *              main axis. This determines the direction that flex items are laid out in.
 *
 * @values: row | row-reverse | column | column-reverse
 * @default: row
 */
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex-dir($args...) { @include flex-direction($args...); }

// NOTE: DO NOT inside an @media block
%flex-column {
  @include flex-direction(column);
}

// NOTE: DO NOT inside an @media block
%flex-row {
  @include flex-direction(row);
}

// NOTE: DO NOT inside an @media block
@mixin flex-column {
  @extend %flex-column;
}

// NOTE: DO NOT inside an @media block
@mixin flex-row {
  @extend %flex-row;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex-wrap
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-wrap-property
 * @description: The 'flex-wrap' property controls whether the flex container is single-line
 *               or multi-line, and the direction of the cross-axis, which determines
 *               the direction new lines are stacked in.
 * @param  {String} [$value: nowrap]
 *
 * @values: nowrap | wrap | wrap-reverse
 * @default: nowrap
 */
@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

/* ----------------------------------------------------------------------
 * @Mixin(): flex-flow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-flow-property
 * @description: The 'flex-flow' property is a shorthand for setting the 'flex-direction'
 *               and 'flex-wrap' properties, which together define the flex container's
 *               main and cross axes.
 * @values: <flex-direction> | <flex-wrap>
 * @default: row nowrap
 */
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

/* ----------------------------------------------------------------------
 * @Mixin(): order
 *
 * @resource: http://w3.org/tr/css3-flexbox/#order-property
 * @description: The 'order' property controls the order in which flex items appear within
 *               their flex container, by assigning them to ordinal groups.
 * @default: 0
 */
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

/* ----------------------------------------------------------------------
 * @Mixin(): flex-grow
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-grow-property
 * @description: The 'flex-grow' property sets the flex grow factor. Negative numbers
 *               are invalid.
 * @default: 0
 */
@mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex-shrink
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-shrink-property
 * @description: The 'flex-shrink' property sets the flex shrink factor. Negative numbers
 *               are invalid.
 * @default: 1
 */
@mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex-basis
 *
 * @resource: http://www.w3.org/TR/css3-flexbox/#flex-basis-property
 * @description: The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
 *
 * @values: Like "width"
 * @default: auto
 */
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}


/* ----------------------------------------------------------------------
 * @Mixin(): flex
 *
 * @resource: http://w3.org/tr/css3-flexbox/#flex-property
 * @description: The 'flex' property specifies the components of a flexible length: the
 *               flex grow factor and flex shrink factor, and the flex basis. When an
 *               element is a flex item, 'flex' is consulted instead of the main size
 *               property to determine the main size of the element. If an element is
 *               not a flex item, 'flex' has no effect.
 * @values: none | <flex-grow> <flex-shrink> || <flex-basis>
 * @default: See individual properties (1 1 0).
 */
@mixin flex($fg: 1, $fs: null, $fb: null) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}


/* ---------------------------------------------------------------------
 * @Mixin(): justify-content
 * @Helper-Mixin(): flex-just
 *
 * @resource: http://w3.org/tr/css3-flexbox/#justify-content-property
 * @description: The 'justify-content' property aligns flex items along the main axis
 *               of the current line of the flex container. This is done after any flexible
 *               lengths and any auto margins have been resolved. Typically it helps distribute
 *               extra free space leftover when either all the flex items on a line are
 *               inflexible, or are flexible but have reached their maximum size. It also
 *               exerts some control over the alignment of items when they overflow the line.
 *
 * @Note: 'space-*' values not supported in older syntaxes.
 * @values: flex-start | flex-end | center | space-between | space-around
 * @default: flex-start
 */
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}
@mixin flex-just($args...) { @include justify-content($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): align-items
 * @Helper-Mixin(): flex-items
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-items-property
 * @description: Flex items can be aligned in the cross axis of the current line of the
 *               flex container, similar to 'justify-content' but in the perpendicular
 *               direction. 'align-items' sets the default alignment for all of the flex
 *               container's items, including anonymous flex items. 'align-self' allows
 *               this default alignment to be overridden for individual flex items. (For
 *               anonymous flex items, 'align-self' always matches the value of 'align-items'
 *               on their associated flex container.)
 *
 * @values: flex-start | flex-end | center | baseline | stretch
 * @default: stretch
 */
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}
@mixin flex-items($args...) { @include align-items($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): align-self
 * @Helper-Mixin(): flex-self
 *
 * @values: auto | flex-start | flex-end | center | baseline | stretch
 * @default: auto
 */
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}
@mixin flex-self($args...) { @include align-self($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): align-content
 * @Helper-Mixin(): flex-content
 *
 * @resource: http://w3.org/tr/css3-flexbox/#align-content-property
 * @description: The 'align-content' property aligns a flex container's lines within the
 *               flex container when there is extra space in the cross-axis, similar to
 *               how 'justify-content' aligns individual items within the main-axis. Note,
 *               this property has no effect when the flexbox has only a single line.
 *
 * @values: flex-start | flex-end | center | space-between | space-around | stretch
 * @default: stretch
 */
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}
@mixin flex-content($args...) { @include align-content($args...); }


/* ---------------------------------------------------------------------
 * @Mixin(): shadow
 *
 * @description: given 1 Integer for rgb or 3 Integers for rgb along with an opacity value,
 *               Create a box shadow with vendor-prefixes
 *
 */
@mixin shadow($r: 0, $opacity:0.2, $x:0, $y:2px, $dp:6px, $rgb: false, $rgba:false) {
  $rgba: if ($rgba, $rgba, if($rgb, transparentize($rgb, $opacity), rgba($r, $r, $r, $opacity)));
  -webkit-box-shadow: $x $y $dp $rgba;
     -moz-box-shadow: $x $y $dp $rgba;
      -ms-box-shadow: $x $y $dp $rgba;
       -o-box-shadow: $x $y $dp $rgba;
          box-shadow: $x $y $dp $rgba;
}

/* ---------------------------------------------------------------------
 * @Mixin(): box-shadow
 *
 * @description: Apply vendor prefixes to a box-shadow
 */
@mixin box-shadow($value) {
  -webkit-box-shadow: $value;
     -moz-box-shadow: $value;
      -ms-box-shadow: $value;
       -o-box-shadow: $value;
          box-shadow: $value;
}




@mixin button-element-defaults {
  display        : flex;
  outline        : 0;
  position       : relative;
  cursor         : pointer;
  text-align     : center;
  white-space    : nowrap;
  vertical-align : middle;
  -ms-touch-action: manipulation;
      touch-action: manipulation;
  user-select    : none;
  -webkit-tap-highlight-color : transparent;
  -webkit-font-smoothing      : antialiased;
  box-shadow: 0 0 0 rgba(0,0,0,0);
  text-align: center;
  @include align-items(center);
  @include justify-content(center);
}

%button-element {
  @include button-element-defaults;
}

@mixin au-button($state:default) {
  $settings: au-button($state);
  @if $state == default {
    @extend %button-element;
  }
  @include _declare($settings);
}

/**
 * @Mixin(): default-transition
 *
 * @param  {[type]} $duration: 200ms         [description]
 * @param  {[type]} $origin:   center        [description]
 * @return {[type]}            [description]
 */
@mixin default-transition($duration: 200ms, $origin: center) {

  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
     -moz-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      -ms-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
       -o-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);

  -webkit-transition-duration: $duration;
     -moz-transition-duration: $duration;
      -ms-transition-duration: $duration;
       -o-transition-duration: $duration;
          transition-duration: $duration;

  -webkit-transform-origin: $origin;
     -moz-transform-origin: $origin;
      -ms-transform-origin: $origin;
       -o-transform-origin: $origin;
          transform-origin: $origin;
}

/**
 * @Mixin(): default-animation
 *
 * @param  {[type]} $duration: 200ms         [description]
 * @return {[type]}            [description]
 */
@mixin default-animation($duration: 200ms) {
  -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
     -moz-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      -ms-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
       -o-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);

  -webkit-animation-duration: $duration;
     -moz-animation-duration: $duration;
      -ms-animation-duration: $duration;
       -o-animation-duration: $duration;
          animation-duration: $duration;
}


%shadow-1dp {box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -2px rgba(0, 0, 0, 0.2), 0 0px 3px 0 rgba(0, 0, 0, 0.12)}
%shadow-2dp {box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12)}
%shadow-3dp {box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.14), 0 3px 3px -2px rgba(0, 0, 0, 0.2), 0 1px 8px 0 rgba(0, 0, 0, 0.12)}
%shadow-4dp {box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2)}
%shadow-6dp {box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.2)}
%shadow-8dp {box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.2)}
%shadow-16dp {box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)}



@mixin gradient-h($start:rgba(255,255,255,0), $start-viz:0%, $end:rgba(255,255,255,1), $end-viz:100%) {
  /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#ffffff+0,ffffff+100&0+0,1+100 */
  background: -moz-linear-gradient(left, $start, $start-viz, $end, $end-viz); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, right top, color-stop($start-viz, $start), color-stop($end-viz, $end)); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(left, $start, $start-viz, $end, $end-viz); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(left, $start, $start-viz, $end, $end-viz); /* Opera 11.10+ */
  background: -ms-linear-gradient(left, $start, $start-viz, $end, $end-viz); /* IE10+ */
  background: linear-gradient(to right, $start, $start-viz, $end, $end-viz); /* W3C */
}


@mixin gradient-v($start:rgba(255,255,255,0), $start-viz:0%, $end:rgba(255,255,255,1), $end-viz:100%) {
  /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#ffffff+0,ffffff+100&0+0,1+100 */
  background: -moz-linear-gradient(top, $start, $start-viz, $end, $end-viz); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, right bottom, color-stop($start-viz, $start), color-stop($end-viz, $end)); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top, $start, $start-viz, $end, $end-viz); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top, $start, $start-viz, $end, $end-viz); /* Opera 11.10+ */
  background: -ms-linear-gradient(top, $start, $start-viz, $end, $end-viz); /* IE10+ */
  background: linear-gradient(to bottom, $start, $start-viz ,$end, $end-viz); /* W3C */
}




@mixin hide-scrollbar {
  &::-webkit-scrollbar,
  &::-webkit-scrollbar,
  &::-webkit-scrollbar {
      display: none;
  }
}

@mixin has-scroll-containers($size:false) {
  @extend %flexbox;
  @include flex-row;
  @include flex(if($size, 0 0 $size, 1 0 auto));
  @include translate3d(0,0,0);
  height: 100%;
  max-height: 100%;
  min-width: if($size, $size, 100%);
  overflow: hidden;
  position: absolute;
  backface-visibility: hidden;
  will-change: overflow;
}

@mixin scroll-container($size:auto, $media:false) {
  $grow: if($size == auto,1,0);
  @include flex($grow, 0, $size);

  @if $media {
    @include scroll-extension();
  } @else {
    @extend %scroll-container;
  }
}

@mixin scroll-extension() {
  @extend %flexbox;
  @include flex-column;
  @include hide-scrollbar;
  @include translate3d(0,0,0);
  position: relative;
  overflow: auto;
  height: auto;
  max-height: 100%;
  min-height: 100%;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: none;

  & > * {@include translate3d(0,0,0)}
}

%scroll-container {
  @include scroll-extension();
}

%has-scroll-container {
  @include has-scroll-containers();
}
